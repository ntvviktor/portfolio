package components

script styling() {
    document.addEventListener('DOMContentLoaded', () => {
		// Get all "navbar-burger" elements
		const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);

		// Add a click event on each of them
		$navbarBurgers.forEach( el => {
			el.addEventListener('click', () => {
			// Get the target from the "data-target" attribute
			const target = el.dataset.target;
			const $target = document.getElementById(target);
	
			// Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
			el.classList.toggle('is-active');
			$target.classList.toggle('is-active');
			});
		});

		const preElemets = document.querySelectorAll("pre");
		if (preElemets) {
			preElemets.forEach(el => {
				if (!navigator.clipboard) {
					return;
				}
				const newBtn = document.createElement('button');
				newBtn.textContent = "Copy";
				newBtn.classList.add("button");
				newBtn.classList.add("is-rounded");
				newBtn.classList.add("is-info");
				newBtn.classList.add("is-light");
				newBtn.classList.add("is-small");
				newBtn.classList.add("button-copy-code");

				el.appendChild(newBtn);
				newBtn.addEventListener("click", async () => {
					await copyCode(el);
				});
			});
		}


		async function copyCode(block) {
			let code = block.querySelector("code");
			let text = code.innerText;

			block.querySelector("button").innerText = "Copied";
			await navigator.clipboard.writeText(text);
			setTimeout(function () {
				block.querySelector("button").innerText = "Copy";
			}, 2000);
		}

		function calculateSettingAsThemeString({ localStorageTheme, systemSettingDark }) {
			if (localStorageTheme !== null) {
				return localStorageTheme;
			}
			if (systemSettingDark.matches) {
				return "dark";
			}
			return "light";
		}

		/**
		* Utility function to update the button text and aria-label.
		*/
		function updateButton({ buttonEl, isDark }) {
			const icon = document.querySelector("#mode-icon");
			const btns = document.querySelectorAll(".button");
			// span.removeChild(span.lastElementChild);
			icon.className = "" ;
			if (isDark) {
				btns.forEach(btn => {
					btn.classList.remove("is-light");
					btn.classList.add("is-dark");
				})
				icon.classList.add("fa-regular", "fa-sun");
			}
			else {
				btns.forEach(btn => {
					btn.classList.remove("is-dark");
					btn.classList.add("is-light");
				})
				icon.classList.add("fa-solid", "fa-moon");
			}
			// const newCta = isDark ? lightEl : darkEl;
			// buttonEl.setAttribute("aria-label", newCta);
		}

		/**
		* Utility function to update the theme setting on the html tag
		*/
		function updateThemeOnHtmlEl({ theme }) {
			document.querySelector("body").setAttribute("data-theme", theme);
		}


		/**
		* On page load:
		*/

		/**
		* 1. Grab what we need from the DOM and system settings on page load
		*/
		const button = document.querySelector("[data-theme-toggle]");
		const localStorageTheme = localStorage.getItem("theme");
		const systemSettingDark = window.matchMedia("(prefers-color-scheme: dark)");

		/**
		* 2. Work out the current site settings
		*/
		let currentThemeSetting = calculateSettingAsThemeString({ localStorageTheme, systemSettingDark });

		/**
		* 3. Update the theme setting and button text accoridng to current settings
		*/
		updateButton({ buttonEl: button, isDark: currentThemeSetting === "dark" });
		updateThemeOnHtmlEl({ theme: currentThemeSetting });

		/**
		* 4. Add an event listener to toggle the theme
		*/
		button.addEventListener("click", (event) => {
		const newTheme = currentThemeSetting === "dark" ? "light" : "dark";

		localStorage.setItem("theme", newTheme);
		updateButton({ buttonEl: button, isDark: newTheme === "dark" });
		updateThemeOnHtmlEl({ theme: newTheme });

		currentThemeSetting = newTheme;
		}); 
	});
}